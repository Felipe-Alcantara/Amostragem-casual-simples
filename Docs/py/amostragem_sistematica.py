from browser import document, html
import random

def calcular_sistematica(ev):
    """Calcula a amostragem sistem√°tica"""
    try:
        # Obter valores dos inputs
        populacao = int(document["populacao_sist"].value)
        amostra_desejada = int(document["amostra_sist"].value)
        
        # Valida√ß√µes
        if populacao <= 0:
            mostrar_erro_sist("A popula√ß√£o deve ser maior que zero!")
            return
        
        if amostra_desejada <= 0:
            mostrar_erro_sist("O tamanho da amostra deve ser maior que zero!")
            return
        
        if amostra_desejada > populacao:
            mostrar_erro_sist("A amostra n√£o pode ser maior que a popula√ß√£o!")
            return
        
        # C√°lculo do intervalo
        intervalo = populacao / amostra_desejada
        intervalo_int = int(intervalo)
        
        # Sorteio da semente
        semente = random.randint(1, intervalo_int)
        
        # Gera√ß√£o dos elementos da amostra
        elementos_selecionados = list(range(semente, populacao + 1, intervalo_int))
        
        # Limitar ao tamanho desejado (caso necess√°rio)
        elementos_selecionados = elementos_selecionados[:amostra_desejada]
        
        # Montar resultado
        resultado_div = document["resultado_sist"]
        resultado_div.clear()
        resultado_div.class_name = "result-box show"
        
        # T√≠tulo
        resultado_div <= html.H3("‚úÖ RESULTADO")
        
        # Informa√ß√µes principais
        info_box = html.DIV(Class="result-item")
        info_box <= html.P(f"üéØ Popula√ß√£o total: {populacao:,} elementos".replace(',', '.'))
        info_box <= html.P(f"üìä Amostra desejada: {amostra_desejada:,} elementos".replace(',', '.'))
        info_box <= html.P(f"üìè Intervalo (salto): {intervalo:.2f} ‚âà {intervalo_int}")
        info_box <= html.P(html.STRONG(f"üé≤ Semente sorteada: {semente}"))
        resultado_div <= info_box
        
        # C√°lculo detalhado
        calc_box = html.DIV(Class="calculation")
        calc_box <= html.P(html.STRONG("üí° PROCEDIMENTO:"))
        calc_box <= html.P(f"1. Dividimos {populacao} por {amostra_desejada} = {intervalo:.2f}")
        calc_box <= html.P(f"2. Sorteamos a semente entre 1 e {intervalo_int}: resultado = {semente}")
        calc_box <= html.P(f"3. A partir de {semente}, saltamos de {intervalo_int} em {intervalo_int}")
        resultado_div <= calc_box
        
        # Elementos selecionados
        sample_box = html.DIV(Class="sample-list")
        sample_box <= html.P(html.STRONG("‚úÖ ELEMENTOS SELECIONADOS:"))
        
        # Mostrar o processo de sele√ß√£o
        sample_box <= html.P(f"üé≤ Semente sorteada: {semente}")
        sample_box <= html.P(f"‚û°Ô∏è Sequ√™ncia gerada: {semente}, {semente + intervalo_int}, {semente + 2*intervalo_int}, ...")
        sample_box <= html.BR()
        
        # Formatar a lista de elementos
        if len(elementos_selecionados) <= 30:
            sample_box <= html.P(f"Amostra completa: {elementos_selecionados}", style={"font-family": "monospace"})
        else:
            # Se for muito grande, mostrar apenas in√≠cio e fim
            primeiros = elementos_selecionados[:15]
            ultimos = elementos_selecionados[-15:]
            sample_box <= html.P(f"Primeiros 15: {primeiros}", style={"font-family": "monospace"})
            sample_box <= html.P(f"...")
            sample_box <= html.P(f"√öltimos 15: {ultimos}", style={"font-family": "monospace"})
        
        sample_box <= html.BR()
        sample_box <= html.P(html.STRONG(f"üìä Total de elementos na amostra: {len(elementos_selecionados)}"))
        resultado_div <= sample_box
        
        # Exemplo pr√°tico detalhado
        exemplo_box = html.DIV(Class="calculation")
        exemplo_box <= html.P(html.STRONG("üîç EXEMPLO DO PROCESSO:"))
        exemplo_box <= html.P(f"Come√ßamos no elemento {semente}")
        
        # Mostrar alguns passos do processo
        passos = min(5, len(elementos_selecionados))
        for i in range(passos):
            elemento = elementos_selecionados[i]
            if i == 0:
                exemplo_box <= html.P(f"  ‚Ä¢ Passo {i+1}: Elemento {elemento} (semente inicial)")
            else:
                exemplo_box <= html.P(f"  ‚Ä¢ Passo {i+1}: Elemento {elemento} ({semente} + {i}√ó{intervalo_int} = {elemento})")
        
        if len(elementos_selecionados) > passos:
            exemplo_box <= html.P(f"  ‚Ä¢ ... (continuando at√© completar {len(elementos_selecionados)} elementos)")
        
        resultado_div <= exemplo_box
        
    except ValueError:
        mostrar_erro_sist("Por favor, preencha todos os campos com valores v√°lidos!")
    except Exception as e:
        mostrar_erro_sist(f"Erro ao calcular: {str(e)}")

def mostrar_erro_sist(mensagem):
    """Mostra mensagem de erro"""
    resultado_div = document["resultado_sist"]
    resultado_div.clear()
    resultado_div.class_name = "result-box show"
    resultado_div <= html.P(f"‚ùå {mensagem}", style={"color": "#ef4444", "font-weight": "bold"})

# Vincular evento ao bot√£o
document["calcular_sist"].bind("click", calcular_sistematica)
