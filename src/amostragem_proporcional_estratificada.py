import random

print("=" * 70)
print("     AMOSTRAGEM PROPORCIONAL ESTRATIFICADA     ".center(70))
print("=" * 70)
print()

print("üìå DEFINI√á√ÉO:")
print("   Quando o experimento estat√≠stico deve escolher elementos de uma")
print("   popula√ß√£o estratificada (particionada), deve-se garantir que a")
print("   representatividade proporcional de cada estrato componha a amostra.")
print()
print("-" * 70)
print()

# Entrada de dados - Estratos
print("üìä DADOS DOS ESTRATOS:")
print()
populacao_1 = int(input("   Estrato 1 - N√∫mero de elementos: "))
populacao_2 = int(input("   Estrato 2 - N√∫mero de elementos: "))
total = populacao_1 + populacao_2

print()
print(f"   ‚úÖ Popula√ß√£o total: {total} elementos")
print()
print("-" * 70)
print()

# Entrada da porcentagem
porcentagem = float(input("üìà Digite a porcentagem que retirar√° da amostra (%): "))
print()

print("=" * 70)
print("                    C√ÅLCULOS                    ".center(70))
print("=" * 70)
print()

# C√°lculos das propor√ß√µes
proporcao_1 = (populacao_1 / total)
proporcao_2 = (populacao_2 / total)
total_da_amostra = int((porcentagem / 100) * total)

amostra_1 = int(round(proporcao_1 * total_da_amostra))
amostra_2 = int(round(proporcao_2 * total_da_amostra))

print(f"Estrato 1:")
print(f"   ‚Ä¢ Propor√ß√£o: {proporcao_1:.2%} ({populacao_1}/{total})")
print(f"   ‚Ä¢ Elementos na amostra: {amostra_1}")
print()
print(f"Estrato 2:")
print(f"   ‚Ä¢ Propor√ß√£o: {proporcao_2:.2%} ({populacao_2}/{total})")
print(f"   ‚Ä¢ Elementos na amostra: {amostra_2}")
print()
print(f"Total da amostra: {amostra_1 + amostra_2} elementos ({porcentagem}% de {total})")
print()
print("-" * 70)
print()
print("üí° PROCEDIMENTO:")
print("   Devemos dividir os estratos e aplicar amostragem casual simples")
print("   em cada estrato para selecionar os elementos da amostra,")
print("   garantindo assim aleatoriedade e justi√ßa na composi√ß√£o.")
print()

print("=" * 70)
print("          DEMONSTRA√á√ÉO: AMOSTRAGEM SISTEM√ÅTICA          ".center(70))
print("=" * 70)
print()

print("üìå M√âTODO ALTERNATIVO:")
print("   Podemos utilizar amostragem sistem√°tica para selecionar elementos.")
print(f"   Inserimos n√∫meros de 1 a {total} e sorteamos uma 'semente'.")
print("   Far√£o parte da amostra todos os n√∫meros terminados pelo valor sorteado.")
print()
print("-" * 70)
print()

print("üé≤ Sorteando semente...")
semente = random.randint(1, 9)
print()
print(f"   Semente sorteada: {semente}")
print()

# Gerando os n√∫meros sorteados com base na semente e salto de 10
numeros_sorteados = list(range(semente, total + 1, 10))

# Limitando o n√∫mero de elementos sorteados
numeros_sorteados = numeros_sorteados[:total_da_amostra]

print("=" * 70)
print("                    RESULTADO FINAL                    ".center(70))
print("=" * 70)
print()
print("üìä AMOSTRA PROPORCIONAL ESTRATIFICADA:")
print(f"   ‚Ä¢ Estrato 1: {amostra_1} elementos")
print(f"   ‚Ä¢ Estrato 2: {amostra_2} elementos")
print(f"   ‚Ä¢ Total: {amostra_1 + amostra_2} elementos")
print()
print("-" * 70)
print()
print("üìä DEMONSTRA√á√ÉO - AMOSTRAGEM SISTEM√ÅTICA:")
print(f"   Elementos selecionados (terminados em {semente}):")
print(f"   {numeros_sorteados}")
print()
print(f"   Total de elementos: {len(numeros_sorteados)}")
print()
print("=" * 70)